name: Deploy Backend

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # Job 1: Testes (CI)
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🗄️ Setup database
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        run: |
          npx prisma generate
          npx prisma migrate deploy

      - name: 🧪 Run tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          JWT_SECRET: test-secret
        run: npm run test

      - name: 🔐 Run security tests
        run: npm run test:security

      - name: 📊 Generate coverage
        run: npm run test:coverage

      - name: 📤 Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/coverage-final.json

  # Job 2: Build
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test # Só roda se os testes passarem

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔨 Build application
        run: npm run build

      - name: 💾 Save build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: dist/

  # Job 3: Deploy (CD)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' # Só deploya na branch main

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚂 Deploy to Railway
        uses: bervProject/railway-deploy@main
        with:
          railway_token: ${{ secrets.RAILWAY_TOKEN }}
          service: backend-api

      # OU Deploy para Render
      # - name: 🚀 Deploy to Render
      #   uses: johnbeynon/render-deploy-action@v0.0.8
      #   with:
      #     service-id: ${{ secrets.RENDER_SERVICE_ID }}
      #     api-key: ${{ secrets.RENDER_API_KEY }}

      - name: ✅ Deployment successful
        run: |
          echo "🎉 Deploy completed successfully!"
          echo "🌐 URL: https://seu-backend.railway.app"

  # Job 4: Notificação
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: deploy
    if: always()

    steps:
      - name: 📢 Send notification
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Deploy successful!"
          else
            echo "❌ Deploy failed!"
          fi
